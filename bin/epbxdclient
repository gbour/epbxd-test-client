#!/usr/bin/env python
# -*- coding: utf8 -*-
"""
    ePBXd test client
    Copyright (C) 2012, Guillaume Bour <guillaume@bour.cc>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
__author__  = "Guillaume Bour <guillaume@bour.cc>"

import re
import yaml
import time
import optparse
import asyncore
from   sip import repl, Account, Manager
from   sip.account import Server

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option('-c', '--config', dest='config_file', default='/etc/epbxdclient.cfg',
        metavar='CONFIG-FILE', help='Configuration file')
    parser.add_option('-x', '--execute', dest='script_file',
        metavar='SCRIPT-FILE', help='Script file to execute')

    (opts, args) = parser.parse_args()
    config = yaml.load(file(opts.config_file, 'rb').read())

    mngr = Manager(patterns_dir=config['patterns'])
    repl._default.set_callback(mngr.handle)

    #sip.REPL = sip.Repl()
    #sips = sip.SipServer(repl)
    for name, params in config['accounts'].iteritems():
        m = re.match("^(?P<transport>.*)://(?P<host>.*):(?P<port>\d+)$",
                     params['registrar'])
        if m is None:
            repl.error("Invalid configuration for %s" % name); continue
        m = m.groupdict()

        acc = Account(str(name),
            registrar = Server(m['transport'], m['host'], int(m['port'])),
            proxy     = Server(m['transport'], m['host'], int(m['port']))
        )
        mngr.add_account(acc)

        repl.info("Account %s listening on %d port (%s)" %\
            (acc.username, acc.sips.portnum(), acc.registrar.transport), place=repl.BEFORE)
    #repl.flush()

    # script automation:w
    ctrl = None
    if opts.script_file is not None:
        from sip.automaton_controller import AutomatonController
        ctrl = AutomatonController(mngr)
        ctrl.launch(opts.script_file)


    while True:
        try:
            #Â interrupt each 10 ms
			#TODO: fail when count set not None (never wait timeout expiration)
            #      add a time.sleep() to prevent consuming 100% cpu
            asyncore.loop(timeout=.01, count=1, use_poll=True)
            mngr.scheduler()
            if ctrl is not None:
                ctrl.eventloop()
            time.sleep(.01)

        except KeyboardInterrupt:
            break

    print '\nend...'
    mngr.repl.cleanup()

